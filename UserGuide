Libraries in C++

This library is used to generate DXF file that can be opened in LibreCAD.
Although it is not completed yet but it can generate DXF file for line and circle.

How to download this library
 	1. Open the terminal and type
		$ git clone git://github.com/Akaur/Library.git
	2. Go to this directory.
		$ cd Library

How to use this library

	1. Create a program named example.cpp
	
		// include header files
		
		#include <iostream> 	
		#include <stdlib.h>
		// include library 'dxf_2D.h'

		#include "dxf_2D.h"

		using namespace std;
		
		/*		CREATING LINE
		 #  Within a main() function if you want to create a line, then create an	 	#
		 #  object of class line like								#
		 #			line l;								#
		 #  then call set(x1,y1,x2,y2,linetype) function of class line with five parameters.	#
		 #  	x1 --> x-coordinate of first point						#
		 #  	y1 --> y-coordinate of first point						#
		 #  	x2 --> x-cordinate of second point						#
		 #  	y2 --> y-cordinate of second point						#
		 #	Values of linetype are --> " ","vertical", "horizontal", "rectangle" .		#
		 #											#
		 #  Then finally call draw(outputfilename.dxf) function to draw a line.			#
		 #	outputfilename is a filename that you want to create.				#
		 #											#
		 #  It will create outputfilename.dxf file in a same folder.				#
		*/

		

		/*		CREATING CIRCLE
		 #  Within a main() function if you want to create a circle, then create an 		#
		 #   object of class circle like							#	
		 #			circle c;							#
		 #  then call set( x1, y1, x2, y2, circletype )function of class circle with five parameters.	#
		 #  x1 --> x-coordinate of first point							#
		 #  y1 --> y-coordinate of coordinate point						#
		 #  x2 --> x-cordinate of second point							#
		 #  y2 --> y-cordinate of second point							#
		 #  Values of circletype are --> " ", "Circle from 2 points "
		 #											#
		 #  Then finally call draw( outputfilename.dxf) function to draw a circle.					#
		 #  It will create outputfilename.dxf file in a same folder.					#
		*/
		    
		int main()
		{
			line l;
			l.set(x1,y1,x2,y2,linetype);		// l.set(34,42,15,32, "rectangle");
			l.draw("rectangle.dxf");
			circle c;
			c.set(x1,y1,x2, y2, circletype);		// c.set(10,23,15,"circle from 2 points");
			c.draw( "circle.dxf");
			return 0;
		}



EXECUTION STEPS

To run make also from terminal, you have to modified environmental variable in makefile

$ export LD_LIBRARY_PATH =/path to libdxf_2D.so

for eg : $export LD_LIBRARY_PATH=/home/username/Library
		OR 

Step 1:  Compiling with Position Independent Code

	We need to compile our library source code i.e. "line.cpp", "circle.cpp", "base.cpp" into position-independent code (PIC):
		$ g++ -c -Wall -Werror -fpic base.cpp circle.cpp line.cpp

Step 2: Creating a shared library from an object file

	Now we need to actually turn this object file into a shared library. We’ll call it liblc.so:
		$ g++ -shared -o libdxf_2D.so base.o circle.o line.o

Step 3: Linking with a shared library
	
	Open the terminal and type
		$ g++ -L. -Wall -o test example.cpp -ldxf_2D

		example.cpp	-> file that you create.
		test        	-> executable filename
		-ldxf_2D option -> looking for libdxf_2D.so

Step 4: Making the library available at runtime
	
	$ echo $LD_LIBRARY_PATH


	There’s nothing in there. Let’s fix that by prepending our working directory to the existing LD_LIBRARY_PATH:

	$ export LD_LIBRARY_PATH=/home/username/Library:$LD_LIBRARY_PATH

Step 5: Now run

	$ ./test



	Go to library folder and open line.dxf and/or circle.dxf files.

